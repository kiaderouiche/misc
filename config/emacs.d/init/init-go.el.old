(require-package 'go-mode)

;;
;;
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string
                          "[ \t\n]*$"
                          ""
                          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq eshell-path-env path-from-shell) ; for eshell users
    (setq exec-path (split-string path-from-shell path-separator))))

(when window-system (set-exec-path-from-shell-PATH))
;;
(setenv "GOPATH" "/usr/local/go/src/github.com/mdempsky/gocode")
(add-to-list 'exec-path "/usr/local/go/bin/gocode")
(add-hook 'before-save-hook 'gofmt-before-save)
;;
(require-package 'company-go)
(require-package 'go-projectile)
(require-package 'gotest)
(require-package 'golint)
(require-package 'go-gopath)

(defun go-mode-defaults ()
  ;; Prefer goimports to gofmt if installed
  (let ((goimports (executable-find "goimports")))
    (when goimports
      (setq gofmt-command goimports)))

  (add-hook 'before-save-hook 'gofmt-before-save nil t)
  (whitespace-toggle-options '(tabs))
  (set (make-local-variable 'company-backends) '(company-go))

  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "C-c C-b") 'pop-tag-mark)
  (local-set-key (kbd "C-c t") 'go-test-current-file)
  (setq tab-width 4)
  )

(add-hook 'go-mode-hook 'go-mode-defaults)


(require-package 'protobuf-mode)
(defconst protobuf-style
  '((c-basic-offset . 2)
    (indent-tabs-mode . nil)))

(add-hook 'protobuf-mode-hook
          (lambda () (c-add-style "my-style" protobuf-style t)))

;; AUTO-COMPLETE
(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)
(with-eval-after-load 'go-mode
   (require 'go-autocomplete))
   
(provide 'init-go)
