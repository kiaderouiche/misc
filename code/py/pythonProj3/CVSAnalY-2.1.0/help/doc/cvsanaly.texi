\input texinfo                @c -*- Texinfo -*-
@c %**start of header

@setfilename cvsanaly.texi
@include version.texi


@settitle GNU @code{CVSAnalY}
@setchapternewpage odd
@c Combine the variable and function indices:
@syncodeindex vr fn
@c Combine the program and concept indices:
@syncodeindex pg cp
@c %**end of header

@copying
This file documents the @code{CVSAnalY} tool, which extracts information
out of source code repository logs and stores it into a database. 

This is Edition @value{EDITION}, last updated @value{UPDATED},
of @cite{The CVSAnalY Manual}, for @code{CVSAnalY} version
@value{VERSION}.

Copyright @copyright{} 2009
LibreSoft

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections.
@end quotation
@end copying

@iftex
@shorttitlepage CVSAnalY
@end iftex
@titlepage
@title CVSAnalY
@subtitle A tool to analyze software repositories.
@subtitle @code{CVSAnalY} Version @value{VERSION}
@subtitle @value{UPDATED-MONTH}
@author Carlos Garcia Campos
@page
@vskip 0pt plus 1filll
@insertcopying
@sp 2
Published by LibreSoft
@end titlepage

@summarycontents
@contents

@ifnottex
@node Top, Overview, (dir), (dir)
@top @code{CVSAnalY}

@insertcopying
@end ifnottex

@menu
* Overview::                        Overview of @code{CVSAnalY}.
* Installation::                    How to install @code{CVSAnalY}.
* Usage::                           Running @code{CVSAnalY}.
* The configuration file::          The @code{CVSAnalY} configuration file.
* Database::                        The Database design.
* FAQ::                             Frequently Asked Questions.
* GNU Free Documentation License::  License for copying this manual.

@detailmenu

The Database design

* Database Overview::               Database schema overview.
* Database schema details::         @code{CVSAnalY} database schema details.
* Extensions schema::               @code{CVSAnalY} extensions schema details.

@end detailmenu
@end menu

@node Overview, Installation, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Overview of @code{CVSAnalY}

The @code{CVSAnalY} tool extracts information out of source code
repository logs and stores it into a database.

@node Installation, Usage, Overview, Top
@chapter How to install @code{CVSAnalY}

@code{CVSAnaly} uses the standard Python Distutils. First of all you
should install all the dependencies. 

@itemize @bullet

@item 
Python MySQLDB: there should be packages for your operating system, so
you should be able to install it as any other software. In Debian
systems the package is @code{python-mysqldb}

@example
@group
# apt-get install python-mysqldb
@end group
@end example

@item
Repository Handler: it's, like @code{CVSAnalY}, part of the LibreSoft
tools
set@footnote{@url{https://forge.morfeo-project.org/projects/libresoft-tools/}}. 
You will probably have to install it from sources. Here is an example
assuming Repository Hanlder 0.2 is used and the tarball has been already
downloaded.

@example
@group
$ tar xvjf repositoryhandler-0.2.tar.bz2
$ cd repositoryhandler-0.2
$ ./configure
$ make
# make install
@end group
@end example

@item 
Python SQLiteDB: it's optional, required only to use SQLite instead
MySQL as database system. It's also usually available in most of the
operating systems. 

@item
Other dependencies (CVS, SVN and Git) are actually optional, although
required depending on the type of repository you want to analyze. It's
recommended to install of them. 

@end itemize

We are now ready to install @code{CVSAnalY}.

@example
@group
$ tar xvzf cvsanaly2-@value{VERSION}.tar.gz
$ cd cvsanaly2-@value{VERSION}
# python setup.py install
@end group
@end example

You can also use @code{CVSAnalY} without installing it, just by running
the @code{cvsanaly} command from the directory sources. 

@example
@group
$ cd cvsanaly2-@value{VERSION}
$ ./cvsanaly2 --help
@end group
@end example

@node Usage, The configuration file, Installation, Top
@chapter Running @code{CVSAnalY}

Once @code{CVSAnalY} is installed you can use it just by running the
executable @command{cvsanaly2}@footnote{It's called cvsanaly2 to avoid conflicts 
with old (incompatible) cvsanaly 1.x)}

@noindent
The syntax to run @command{cvsanaly2} is the following:

@example
cvsanaly2 [options] [URI]
@end example

@noindent
Analyze the given URI. An URI can be a checked out local path directory, 
or a remote URL pointing to a repository. If URI is omitted,
the current working directory will be used as a checked out
directory. The type of the repository will be automatically detected, so
the only information you have to provide about the repository is this 
URI. @code{CVSAnalY} doesn't run checkouts, so if the repository doesn't
support remote retrieving of the log, a checked out directory must be
provided.
The repository log will be parsed and stored in a
database. @code{CVSAnalY} doesn't expect to have all privileges on the
database server, so the database should be created before running
@code{CVSAnalY} or it will fail. This is not relevant if you are using
SQLite since there isn't any server. 

@noindent
Global options:

@itemize @bullet
@item 
-h, --help

Show help information

@item 
-V, --version

Show the version number of @code{CVSAnalY}

@item
-g, --debug

Enable debug mode. It shows useful information for debugging like
the commands that are being executed, the SQL statements, parsing status
and so on. 

@item
-q, --quiet

Run silently, only important error messages is printed. 

@item
--profile

Enable profiling mode. It shows information about how long some tasks
take to run. 

@item
-f, --config-file

Use a custom configuration file. @xref{The configuration file}

@item
-l, --repo-logfile

Use the given log file as the input of the log parser instead of running
the log command for the repository. 

@item
-s, --save-logfile

Save the input log information to the given path.

@item
-n, --no-parse

Skip the parsing process. It only makes sense in conjunction with
--extensions

@item
--extensions

Run the given extensions after the log parsing/storing process. It
expects a comma-separated list with the name of the extensions to
run. Dependencies among extensions are automatically resolved by
@code{CVSAnalY}.

@end itemize

@noindent
Database specific options:

@itemize @bullet
@item
--db-driver

Use the given database system. MySQL (actually @code{mysql}) is the default
(and recommended) option.

@item
-u, --db-user

The name of the user to connect to the database system. The given user
should exist, since @code{CVSAnalY} will not try to create any
user. This option doesn't make sense if you are using SQLite. The
default option is @code{operator}. 

@item
-p, --db-password

The user's password to connect to the database system. If it's not
provided, you will be prompted to enter it. 

@item
-d, --db-database

The name of the database. I should exist, since @code{CVSAnalY} will not
try to create any database. If you are using SQLite, this option might
be a local path instead of just a name. Default option is
@code{cvsanaly}.

@item
-H, --db-hostname

The host name where database system is running. This option doesn't make
sense when using SQLite. Default option is @code{localhost}.
@end itemize

@noindent 
Examples:

@itemize @bullet

@item
Running @code{CVSAnalY} with a CVS repository already checked out using
MySQL driver.

@example
@group
$ cvsanaly2 -u carlos -d gstreamer ~/src/cvs/gstreamer
@end group
@end example

@item
Running @code{CVSAnalY} with a SVN repository using the remote URI and
SQLite as the database driver


@example
@group
$ cvsanaly2 --db-driver sqlite -d ~/db/nautilus.db \
http://svn.gnome.org/svn/nautilus
@end group
@end example

@end itemize

@node The configuration file, Database, Usage, Top
@chapter The @code{CVSAnalY} configuration file

Running @code{CVSAnalY} might require to provide a lot of command line
options. Some of such options such the hostname, database driver,
database user name and so on, depend on the system where @code{CVSAnalY}
is running and not on the repository to be analyzed. Those options have
to be always provided, making the @code{CVSAnalY} execution command too
large in some cases. A configuration file can be used to avoid this
situation. Before parsing the command line option provided by the user
@code{CVSAnalY} reads its configuration file, taking the options found
there to replace the default values. There might be two configuration
files:

@itemize @bullet

@item
System-wide configuration file: /etc/cvsanaly2

@item
User configuration file: ~/.cvsanaly2/config

@end itemize

The system-wide configuration file is read first, then the user
configuration file is read overriding the options already provided by
the system-wide file, and finally the command line options are parsed
overriding any other option already provided. For the options not
provided by a configuration file or the command line interface, the
default values will be taken. 

The configuration file is just a file containing key-value pairs. 

@example
@group
# Run in debug mode
debug = True

# Run quiet
quiet = True

# Enable profiling
profile = True

# Database driver
db_driver = 'mysql'

# Database user
db_user = 'cvsanalyuser'

# Database user password
db_password = 'mysqlpassword'

# Database hostname
db_hostname = 'localhost'

# Run always Metrics and CommitsLOC extensions
extensions = ['Metrics', 'CommitsLOC']
@end group
@end example

@node Database, FAQ, The configuration file, Top
@chapter The Database design

@menu
* Database Overview::               Database schema overview.
* Database schema details::         @code{CVSAnalY} database schema details.
* Extensions schema::               @code{CVSAnalY} extensions schema details.
@end menu

@node Database Overview, Database schema details, Database, Database
@section Database schema overview

The database is divided into two main parts. The first one consists on the
set of tables that represents the history of the project based on the
information from the repository log. These tables are filled by
@code{CVSAnalY} during the parsing process exclusively with the
information provided by the repository log. This is the main goal of
@code{CVSAnalY} and, therefore, these tables will always be present in
the schema independently of how @code{CVSAnalY} was executed or even
what project has been analyzed. The second part is composed by tables
created and filled by @code{CVSAnalY} extensions
(@xref{Extensions schema}). The information provided by these tables depends on
every @code{CVSAnalY} Extension, however the main goal is common: to
complete the @code{CVSAnalY} schema with additional information directly
related to the existing tables but not provided by the repository log. 

@sp 0.5
@center @image{figs/db_schema, 15cm}

@subsection General conventions

The database has been designed according to the following rules:

@itemize @bullet

@item
Internal identifier: every table has an internal identifier called
@code{id}. It's an auto-incremental integer and it's always the primary key of
the table.

@item
Foreign keys: all fields with the suffix @code{_id} are foreign keys so
that it's easy to identify them quickly. 

@item
Character encoding: @code{CVSAnalY} uses always utf-8 so all the fields
in the database that contain strings are utf-8 encoded.
@end itemize


@node Database schema details, Extensions schema, Database Overview, Database
@section @code{CVSAnalY} database schema details

@subsubheading The scmlog table

The main table is scmlog. Every commit in the repository is represented
by a record in the scmlog table. 

@itemize @bullet

@item
id: Identifier in the database.

@item
rev: It's the revision identifier in the repository. It's always unique
in every repository. 

@item
committer_id: Committer identifier, that is, the identifier in the
database of the person who did the commit.

@item
author_id: Author identifier. Some source control management systems,
differentiate the person who did the commit from the person who actually
made the changes. When not supported by the repository, this field will
be @code{NULL}.

@item
date: The date when the commit was done. 

@item
message: The commit message. 

@item
composed_rev: It's a boolean to indicate whether the rev field is
composed or not. This is needed because the rev field must be unique in
every repository which is not possible in CVS since it uses revision
numbers per file. The combination of a file path and its revision is
what make a commit unique in a system like CVS. For this particular case
the rev field is represented by the concatenation of the revision number, the
pipe character ('|') and the file path. Here is an example for a CVS
repository:

@example
1.1.2.1|/poppler/glib/demo/render.c
@end example

@item
repository_id: Identifier in the database of the repository where the
commit was done. 

@end itemize

@subsubheading The actions table

This table describes the different actions performed in every commit. In
systems like CVS, where the commit is limited to a single file, there
will be only one record in the actions table for every commit. However,
most of the version control systems support atomic commits, where
several actions are carried out on several files@footnote{With
@code{file} we actually refer to both file and directory}. 

@itemize @bullet

@item
id: Identifier in the database.

@item
type: It's a character representing the type of the action. Currently
supported actions are:

@itemize @bullet
@item
@code{'A'}: The file has been added to the repository. 
@item
@code{'M'}: The file has been modified. It's the most common action. 
@item
@code{'D'}: The files has been deleted. 
@item
@code{'V'}: The file has been renamed. This might be a simple rename or
that the file has been moved to another path keeping its name or not. In
any case, the file identifier will never change after a @code{'V'}
action.
@item
@code{'C'}: The file has been copied. It's similar to an @code{'A'}
action, since a new file is added to a repository, but in this case
it was copied from another existing file. 
@item
@code{'R'}: The file has been replaced. This means that an existing file
is removed, and a new one with the same name is added. In addition, another
existing file might be used as a base for the replacement, that is, the
new file is a copy of such an existing file. 
@end itemize

Not all of the action types are always supported, for example, for CVS
repositories only @code{'A'}, @code{'M'} and @code{'D'} actions are
supported. 

@item
commit_id: It's the identifier of the commit where the action was
performed. It's a foreign key that references the @code{id} field of
@code{scmlog} table.

@item
branch_id: It's the identifier of the branch where the action was
performed. It's a foreign key that references the @code{id} field of
@code{branches} table. 

@end itemize

@subsubheading The files table

The @code{files} table contains an identifier for every file or directory found
in the repository.

@itemize @bullet

@item
id: Identifier in the database.

@item
file_name: The name of the file or directory. Note that this is not a
path. 

@item
repository_id: It's the identifier of the repository to which the file
belongs. It allows to easily get the list of files of the
repository. It's a foreign key that references the @code{id} field of
the @code{repositories} table.
 
@end itemize

@subsubheading The file_links table

This table contains relationships between files. The relationship
between two files is always parent - child. 

@itemize @bullet

@item
id: Identifier in the database.

@item
parent_id: the identifier of parent file or -1 if the file is in the
root of the repository. It's a foreign key that references the @code{id}
field of the @code{files} table.

@item
file_id: the identifier of the file. It's a foreign key that references
the @code{id} field of the @code{files} table.

@item
commit_id: the identifier of the commit where the relationship appears
for the first time. When a file or directory is moved, a new link is
created with the id of the commit where the move action as
performed. There will be, therefore, two links for the same file each
one with a different parent. In order to know which parent is the right
one at a certain point (revision), the commit_id field is used to choose 
the link that contains the latest commit. It's a foreign key that
references the @code{id} field of the @code{scmlog} table.

@end itemize

@subsubheading The file_copies table

The @code{file_copies} table is used to store additional information about
actions that involve more than one file. Copies, moves, renames and
replacements are actions performed over two or more files. The @code{file_id}
field of the @code{actions} table refers always to the file that is the
object of the action. 

@itemize @bullet

@item
id: Identifier in the database.

@item
to_id: identifier of the file that is the destination of the action. In
a move or copy operation, this field is the same than the @code{file_id}
in the @code{actions} table. However, when a file is replaced, the
@code{file_id} stored in the @code{actions} table is the existing file
being replaced, and this field contains the @code{file_id} of the new
file that replaces the existing one. It's a foreign key that references
the @code{id} field of the @code{files} table.

@item
from_id: identifier of the file that is the source of the action. In a
move or copy operation this is the @code{file_id} of the file from which
the move or copy is done. It's a foreign key that references the
@code{id} field of the @code{files} table.

@item
from_commit_id: identifier of the commit from which the operation is
carried out. The source file contents are taken from the revision
associated to this commit identifier. It's a foreign key that references
the @code{id} field of the @code{scmlog} table

@item
new_file_name: contains the new name of the file for rename actions or
@code{NULL} for other actions. 

@item
action_id: the identifier of the action. It's a foreign key that
references the @code{id} field of the @code{actions} table.

@end itemize

@subsubheading The branches table

This table contains the list of branches found in the repository

@itemize @bullet

@item
id: Identifier in the database.

@item
name: The name of the branch

@end itemize

@subsubheading The tags and tag_revisions tables

The combination of these two tables represents the list of tags found in
the repository. The @code{tags} table contains the names of the tags
while the @code{tag_revisions} tables contains the list of revisions
pointing to every tag

@itemize @bullet

@item
id: Identifier in the database.

@item
name: The name of the tag

@item
tag_id: the identifier of the tag associated to this revision. It's a
foreign key that references the @code{id} field of the @code{tags}
table.

@item
commit_id: the identifier of the commit representing the revision. It's
a foreign key that references the @code{id} field of the @code{scmlog}
table. 

@end itemize

@subsubheading The people table

This table contains the name and email (when available) of the people
involved in the repository.

@itemize @bullet

@item
id: Identifier in the database.

@item
name: the person's name or nick. Depending on the repository type this
field contains the real name (or at least the name provided by the user) or
the user name for repositories that have authentication like CVS or SVN.

@item
email: The email of the person or @code{NULL} if it's not provided by
the repository.

@end itemize

@subsubheading The action_files and actions_file_names views

The database design tries to represent all the logic behind the output
given by a repository log. Because of this, the complexity of the schema
makes difficult to write queries. In order to help the users of the
database, @code{CVSAnalY} provides these two views.

@itemize @bullet

@item
action_files: the @code{file_id} field of the @code{actions} table might
be confusing. Depending on the situation you might want the
@code{file_id} of the @code{actions} table or the @code{to_id} field of
the @code{file_copies} table. For example, if you are interested on the
new files added, you need the @code{to_id} field, while if you want to
know what files have been deleted, you need the @code{file_id} field,
since a replace operation implies that the replaced file is not
available anymore. This view is useful when you are in the first
case. The view is just a ``clone'' of the @code{actions} table, but using the
@code{to_id} as @code{file_id} for replace actions.

@item
actions_file_names: since the name of a file may change during the
history, we usually need to get the new file name given to a file as a
result of a rename action. The new file name is stored in the
@code{file_copies} tables which means we always need to add an extra
join in the queries. This view is also a ``clone'' of the
@code{actions} table including also the @code{new_file_name} field of
the @code{file_copies} tables.

@end itemize


@node Extensions schema, , Database schema details, Database
@section @code{CVSAnalY} extensions schema details

A @code{CVSAnalY} Extension adds one or more tables with additional
information directly related to the existing tables, but not provided by
the repository log. 

@subsubheading FileTypes extension

This extension adds the @code{file_types} table containing the file type
associated of every file found in the repository. The file type is not
the mime type of the file but one of the following categories:

@itemize @bullet

@item
code: source code files (C/C++, Python, Java, etc.)

@item
build: files used to build and configure the source code (Makefile,
configure, cvsignore, etc.)

@item
ui: files containing graphical user interface definitions (glade,
gtkbuilder, ui files, etc.)

@item
i18n: translation files (.po, .mo, etc.)

@item
documentation: documentation files

@item
devel-doc: documentation for developers (HACKING, ChangeLog, etc.)

@item
package: package files (.tar.gz, .deb, .rmp, etc.)

@item
image: icons and files (.png, .jpeg, etc.)

@item
multimedia: audio and video files (.ogg, .avi, .mp3, etc.)

@item
unknown: files with an unknown type, generally files that don't have
extension

@end itemize

The file type is based on the file extension and it's assumed that a
file doesn't change its type during the history. 

The @code{file_types} table contains the following fields:

@itemize @bullet

@item
id: Identifier in the database.

@item
file_id: the file identifier. It's a foreign key that references the
@code{id} field of the @code{files} table.

@item
type: the name of the type (as described above in this section)

@end itemize

@subsubheading Metrics extension

This extension provides simple source code metrics for every revision of
every single file found in the repository. Since this extension is about
source code, it uses the FileTypes extension to get only source code
files.

@itemize @bullet

@item
id: Identifier in the database.

@item
file_id: the identifier of the file. It's a foreign key that references
the @code{id} field of the @code{files} table.

@item
commit_id: the identifier of the commit (revision). It's a foreign key
that references the @code{id} field of the @code{scmlog} table

@item
lang: the programming language (as given by the sloccount tool)

@item
sloc: number of source code lines of code

@item
loc: number of lines of code

@item
ncomment: number of comments

@item
lcomment: number of commented lines

@item
lblank: number of blank lines

@item
nfunctions: number of functions

@item
mccabe_*: all fields starting with mccabe correspond to McCabe
cyclomatic complexity

@item
halstead_*: all fields starting with halstead correspond to Halstead
software science metrics

@end itemize

@subsubheading CommitsLOC extension

This extension adds a table with the number of lines added and removed
for every commit. 

@itemize @bullet

@item
id: Identifier in the database.

@item
commit_id: the commit identifier. It's a foreign key that references the
@code{id} field of the @code{scmlog} table

@item
added: number of lines added in the given commit

@item
removed: number of lines removed in the given commit

@end itemize


@node FAQ, GNU Free Documentation License, Database, Top
@chapter Frequently Asked Questions

@section Database

@subsection Why aren't branches associated to commits instead of actions?

While it's logical to think that a commit is always associated to a
single branch, that's not true in SVN repositories. The fact that
branches don't really exist in SVN (they are just paths in the
repository), makes possible to find commits involving files from different
branches for the same revision. It happens, indeed, more often
than expected. So, in most of the cases, all actions referencing the
same commit will reference the same branch too, but we need to keep the
relationship between action and branch in order to support all other cases. 

@subsection Why doesn't files table contain full paths for files?

@code{CVSAnalY} stores the whole history of the project in the
database. Paths do change quite often during the history of a project as
a result of a rename or a move operation. We are interested in files
independently of their paths, but we also need to be able to get the full
path of a file at any point in the history. Assigning identifiers to the
files instead of the paths we can follow the history of any given file
even if it's renamed or moved. Additionally, relationships between files
are stored in the file_links table. When, for example, a directory is
moved to another path, we only need to create a new relationship between
two existing files. 

@subsection Why are there two tables files and file_links instead of a single files table with a pointer to its parent file?

That was the first approach we followed. Since we are trying to
represent a tree, sounds reasonable to use a single table where every
record is a node of the tree containing a pointer to its parent
node. This approach works indeed, but makes quite hard to build paths,
since it requires multiple recursive queries for every file
path. We use instead a graph schema, where there's a table containing
the vertices (files table) and another table containing edges
(file_links table). A tree is indeed a graph without cycles. With this
approach it's possible to get the adjacency matrix for any given
revision with only two queries. Building paths for the files once we
have the adjacency matrix is trivial. 

@subsection Why are there two tables for tags?

Despite it tires to represent the same concept, tags are implemented in
a different way in every source code management system. Theoretically, a
tag is just a label that points to a snapshot of the repository. In CVS
is not possible to take a snapshot of the repository with only one
revision, since revisions are per file. In CVS a tag is actually a list of
pairs file-revision which is represented by @code{CVSAnalY} with the
@code{tags} and @code{tag_revisions} tables. For SVN and Git
repositories there will be only on revision for every tag@footnote{In
SVN doesn't exist tags, they are usually implemented by copying the
whole source tree into another directory. In this case the revision
stored in the @code{tag_revisions} table points to the copy
operation}

@subsection Why is CommitsLOC and extension if that information is provided by the cvs log command?

Because it's only available in the log output of CVS repositories. For
the other repositories we have to get. In the case of SVN getting such
information might take a long time depending on the number of
revisions. Since the lines added/removed per commit is not the most
important information provided by @code{CVSAnalY} and it makes the
parsing process quite longer, we decided to move it
to an extension, so that it will be optionally executed.

@raisesections
@include fdl.texi
@lowersections

@bye
